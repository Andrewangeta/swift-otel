//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: opentelemetry/proto/collector/trace/v1/trace_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf

/// Service that can be used to push spans between one Application instrumented with
/// OpenTelemetry and an collector, or between an collector and a central collector (in this
/// case spans are sent/received to/from multiple Applications).
///
/// Usage: instantiate `Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClient`, then call methods of this protocol to make API calls.
internal protocol Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientInterceptorFactoryProtocol? { get }

    func export(
        _ request: Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse>
}

extension Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientProtocol {
    internal var serviceName: String {
        "opentelemetry.proto.collector.trace.v1.TraceService"
    }

    /// For performance reasons, it is recommended to keep this RPC
    /// alive for the entire life of the application.
    ///
    /// - Parameters:
    ///   - request: Request to send to Export.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    internal func export(
        _ request: Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse> {
        makeUnaryCall(
            path: "/opentelemetry.proto.collector.trace.v1.TraceService/Export",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeExportInterceptors() ?? []
        )
    }
}

internal protocol Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when invoking 'export'.
    func makeExportInterceptors() -> [ClientInterceptor<Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse>]
}

internal final class Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClient: Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientProtocol {
    internal let channel: GRPCChannel
    internal var defaultCallOptions: CallOptions
    internal var interceptors: Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientInterceptorFactoryProtocol?

    /// Creates a client for the opentelemetry.proto.collector.trace.v1.TraceService service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    internal init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Opentelemetry_Proto_Collector_Trace_V1_TraceServiceClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}
